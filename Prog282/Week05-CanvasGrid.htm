<p>Week05-CanvasGrid</p>
<p>We continue to work on the CanvasGrid program. You may either use the code in Prog282-Hints as the basis for your work, or you can pillage that code to your heart's content. In general, if you have been able to (more or less) successfully complete each assignment so far, then you probably want to keep the code you have created. If JavaScript is new to you, then perhaps you would appreciate having a<br />foundation on which to build the next stages of this project. In that case, you might want to rely on CanvasGrid03 from the Prog282-Hints repository.</p>
<h2 id="major-goals-for-week05">Major Goals for Week05</h2>
<ul>
<li>Refactor CanvasGrid03 from Prog282-Hints repository per our discussion on Monday, and check it in to your repository in a directory called Week05-CanvasRefactor. Pull apart Draw.js so that you end up with two files: Draw.js and Keyboard.js. The draw code is in Draw.js, and the keyboard code is in Keyboard.js. We did this in class, and serves as a model to demonstrate how we modularize our code.</li>
<li>Modularize - Make sure you are discovering the major objects in your program. These might include Draw, KeyboardInput, Main (or Core), Characters, etc.</li>
<li>Unit Test - You should have at least one unit test for each of your objects. Use the QUnit module(&quot;&quot;) syntax so I can easily discover which tests apply to which object. Include internal tests for testing private methods.</li>
<li>A new array where you store the NPCs (Non-Playing-Characters) for your game. We have a 12 X 12 array where we store the values the for our Grid. We should now add a second 12 X 12 array where we store the NPCs. Each NPC should be marked with a value 1 through 3. Spaces where no NPCs are found should just have the value 0. You should draw different bitmaps to the screen for different characters. For instance, an NPC marked by a 1 would have blue colored bitmap, those marked with 2 a red color, etc. Optionally, you should be able to detect the collision.</li>
<li>Run your game from AWS with UpStart.</li>
</ul>
<p>The addition of a second 12 X 12 array means that you will have to have two nested for loops, or check for the state of your second array inside the first nested for loop.</p>
<p>We are building up our grid in layers. There is the base layer, which is the background. Then on top of that we blit the NPCs, then we blit the main character (Hero) on top of that. Some games built like this end up having three or four layers.</p>
<p>This might be a good time to look at some of the bitmaps I'm giving you and notice that there are &quot;transparent&quot; sections in them. When you see a mushroom blitted on the road, it is not that the mushroom has a background shaded like a road, it is that background color behind the mushroom is treated as transparent. To tell you the truth, I haven't looked up the algorithm being used here, but the standard procedure in these cases is to have the pixel in the upper left hand corner of GIF bitmaps designate the transparent color. The drawImage routine from the Canvas object looks for that pixel, and never blits any pixels of that shade to the screen.</p>
<figure>
<img src="../Images/Grid02.png" alt="Blit grass and path, then the tree, which is an NPC of sorts, on top" /><figcaption>Blit grass and path, then the tree, which is an NPC of sorts, on top</figcaption>
</figure>
<p>(And yes, a tree is a not a very good NPC, but hopefully this shows what I want. And frankly, I don't care what kind of images you use for your NPCs. If you have a nice Orc, great, but anything will do.)</p>
<p><a href="http://gamedev.stackexchange.com/questions/19257/how-do-i-make-magenta-in-my-png-transparent-in-html5-canvas-js">http://gamedev.stackexchange.com/questions/19257/how-do-i-make-magenta-in-my-png-transparent-in-html5-canvas-js</a></p>
<h2 id="upstart-references">Upstart References</h2>
<ul>
<li>JsObjects/JavaScript/NodeCode/ExpressSend</li>
<li>Prog282-Hints/CanvasGrid03 - see the CanvasGrid03.conf file</li>
</ul>
<p>And this file:</p>
<p><a href="http://www.elvenware.com/charlie/development/web/JavaScript/NodeJs.html#upstart">http://www.elvenware.com/charlie/development/web/JavaScript/NodeJs.html#upstart</a></p>
<h2 id="what-to-turn-in">What to Turn In</h2>
<p>When you turn in the assignment, check your latest code into your repository. Submit the URL for your UpStart powered game.</p>
