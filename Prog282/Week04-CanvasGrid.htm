<h2 id="turning-in-the-assignment">Turning in the Assignment</h2>
<p>Place your work in your repository so that I can view your source and see what you have you have accomplished.</p>
<p>You can either place it in a folder can Week04-CanvasGrid, or simply update an existing folder, such as Week03-DrawGrid. The key is that the source for your project is in your repository so I can look it over.</p>
<h2 id="main-character-score">Main Character Score</h2>
<p>Create two JSON files called <strong>Hero.json</strong> and <strong>Orc.json</strong>. Each should contain a single object that tracks at least five character traits:</p>
<ul>
<li>Type<br /></li>
<li>Moves</li>
<li>Experience</li>
<li>Health</li>
<li>Strength</li>
</ul>
<p>Each trait should be a property of the object stored in your JSON file. All the properties should be numeric values except for Type, which can be a player type, such as hero, orc, shopKeeper, etc. Set the <strong>Health</strong> of the <strong>Orc</strong> to 5.</p>
<p>Load the <strong>Hero</strong> JSON file into memory from your &quot;server&quot; when your program starts. Hold the object in a property called character:</p>
<pre><code>var character = null;</code></pre>
<p>Load the <strong>Orc</strong> JSON file into memory from your server. Hold the object in property called <strong>orc</strong>:</p>
<pre><code>var orc = null;</code></pre>
<p>Whenever the user moves the main character, increment the Moves property. Use the Modulus operator (%) to increment the Exprience trait each time the user moves 25 spaces. After every 10th move the character makes there should be a 15% chance that the user's Strength is incremented by 1. When the user presses a button, save the score back to the server in a folder set aside for that user.</p>
<p>You should read and write the JSON using the jQuery ajax method.</p>
<p>References:</p>
<ul>
<li>See JsObjects/JavaScript/NodeCode/SimpleReadWriteJson</li>
<li>See JsObjects/JavaScript/NodeCode/PresidentJson</li>
<li>See JsObjects/JavaScript/NodeCode/jsonRead</li>
</ul>
<p>There are also some sections in the jQueryBasics.html file that might prove helpful:</p>
<ul>
<li><a href="http://elvenware.com/charlie/development/web/JavaScript/JQueryBasic.html#jquery-ajax-with-json">jQuery Ajax with JSON</a></li>
<li><a href="http://elvenware.com/charlie/development/web/JavaScript/JQueryBasic.html#the-ajax-success-function">Ajax success function</a></li>
<li><a href="http://elvenware.com/charlie/development/web/JavaScript/JQueryBasic.html#the-ajax-error-handler">Ajax error function</a></li>
</ul>
<h2 id="main-character-test-page">Main Character Test Page</h2>
<p>As we start adding functionality to our program, we need to be sure our program remains modular, and is easy to test. In particular, if you have several big pieces inside one huge program, it can quickly become very hard to get an overview of the whole program.</p>
<p>One way to simplify complexity is called the &quot;divide and conquer strategy.&quot; To implement this strategy we break the program out into modules that can be tested separately. In our case, we want three separate views of our program:</p>
<ul>
<li>A view that tests the drawing of the grid and moving the main character. This is the week 3 assignment.</li>
<li>A view that tests the scoring</li>
<li>A view that combines both the drawing of the grid and the scoring.</li>
</ul>
<p>The latter, view, of course, is the full program. Our goal, however, is to create smaller test programs that can focus on each of the parts of the program. The point is that it is relatively easy to understand each of the small programs, even if it is hard to understand the whole program. Furthermore, we are ensuring that we create a modular program that does not have too many cross dependencies. Every time one part of a program depends on another part of the program you have two problems:</p>
<ul>
<li>It is hard to see how any one part works, because understanding it requires understanding two separate pieces.</li>
<li>A change to one part of the program can break some other part of the program. If Part A does not work, but the problem is in Part B, it can be hard to trace the error from Part A back to Part B.</li>
</ul>
<p>Your goal, then, is to create three HTML files:</p>
<ul>
<li>TestGrid.html</li>
<li>TestScoring.html</li>
<li>GridGame.html</li>
</ul>
<p>The first tests the grid and only the grid. The second tests the scoring and only the scoring. The third shows the whole game working together.</p>
<p>References:</p>
<ul>
<li>See JsObjects/HandlebarDemos/Example09</li>
</ul>
<h2 id="the-test-scoring-file">The Test Scoring File</h2>
<p>Below you can see a screen shot showing one possible way to set up your TestScoring.html file. On the left you see the Hero's stats, on the right you see the Orc's stats.</p>
<figure>
<img src="../Images/TestScore01.png" alt="Test Scoring Screen" /><figcaption>Test Scoring Screen</figcaption>
</figure>
<p>When the user presses the <strong>Strike</strong> button the Hero enters into conflict with the Orc. The following calculation is performed:</p>
<ul>
<li>A random number between 1 and 100 is chosen.</li>
<li>A <strong>bonus</strong> value is calculated. The bonus is equal to the hero's <strong>Exprience</strong> plus the hero's <strong>Strength</strong>.</li>
<li>If the random number plus the <strong>bonus</strong> are greater than 50, then Orc's Health is decremented by 1 point, and the Hero should have a 25% chance of gaining an <strong>Experience</strong> point.</li>
</ul>
<p>After the calculation is made, you should redisplay the values for both the Orc and the Hero. The Orc should start with some positive Health score, such as 5.</p>
<p>You should also display at least some data about the outcome of the conflict. In the screenshot above, I display the output from the random roll. You should provide additional information such as:</p>
<ul>
<li>The bonus score</li>
<li>Did the Orc lose health?</li>
<li>Did the Hero gain experience?</li>
</ul>
<p>You should also add a button allowing the user to save the scores back to the server. The saved file should not overwrite the original files Hero and Orc character files that you loaded. In particular, the saved file should be saved into a directory called <strong>SavedGames</strong>.</p>
<h2 id="random-numbers">Random Numbers</h2>
<p>Here is JavaScript code that simulates the rolling of one 6 sided die:</p>
<pre><code>var randomNumber = Math.floor(Math.random() * 6) + 1;</code></pre>
<p>If this returns a number between 1 and 6, it should not be hard to convert it to return a number between 1 and 100.</p>
<h2 id="html-side-by-side">HTML Side by Side</h2>
<p>Certain HTML elements, such as DIVs and TABLEs, appear by default on a new line. If you want to see them side by side, as my two tables appear side by side in the screen short for this assignment, you can add CSS that looks like this:</p>
<pre><code>#orcTable, #characterTable {
    float: left; 
}</code></pre>
<p>You might also play with the <strong>border-width</strong> and <strong>background-color</strong> for these two elements.</p>
<h2 id="after-loggin-in">After Loggin In</h2>
<p>So we should start creating directories for each user? Be able to log in as one user, see your current score, then log in as another user, and track the score of that user? Perhaps not quite yet....</p>
<p>This part about creating directories will be for next week. If you want to work ahead, try to get the user's name from their openid. That is, strip the http:// part from the open id. Suppose you have this open id:</p>
<pre><code>http://marylu.myopenid.com</code></pre>
<p>Then you will want to get the string marylu.myopenid.com, then use that string to create a directory. Here is the code for extracting the string:</p>
<pre><code>var getUserName = function(identity) {
    var data = identity.replace(&#39;http://&#39;, &#39;&#39;);
    return data.replace(&#39;/&#39;, &#39;&#39;);
}</code></pre>
<p>And here is an example from JsObjects of to create a directory:</p>
<p><a href="https://github.com/charliecalvert/JsObjects/tree/master/JavaScript/Syntax/MakeDirectory">https://github.com/charliecalvert/JsObjects/tree/master/JavaScript/Syntax/MakeDirectory</a></p>
<p>To get the example, just make sure your copy of JsObjects is up to date.</p>
