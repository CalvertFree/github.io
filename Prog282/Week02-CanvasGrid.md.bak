Canvas Grids
============

Create a 12 X 12 grid of 25 X 25 bitmap images displayed
in an HTML 5 canvas element. The user should be
able to use the up, left, right and down keys to
move a main character, represented by a second
bit map, around on the grid.

The canvas element should be 12 X 25 pixels
high, and 12 X 25 pixles wide.

Your program should include these files: 

* index.html
* index.js
* images.gif
* jquery-1.9.1.js

You should have a document ready handler at
the bottom of the javascript file. All the
rest of your code should be inside one 
object that follows the modular pattern
and is called Game.

Here is how to capture keydown events:

~~~~
	window.addEventListener('keydown', doKeyDown, true);
		
	var doKeyDown = function(evt) {
		switch (evt.keyCode) {
			case 38:
				/* Up arrow was pressed */
				break;
			case 40:
				/* Down arrow was pressed */
				break;
			case 37:
				/* Left arrow was pressed */
				break;
			case 39:
				/* Right arrow was pressed */
				break;
		}
	};
~~~~
	
When you are done, check your project into
your Prog282-LastName folder, and make
sure the folder is shared with me. When
you turn in the assignment, include a 
link to your BitBucket home page or
directly to your Prog282-LastName project.

Strategies
----------

If you look in **JsObjects**, at example **JavaScript/Graphics/Basics05**, 
you will see that some of the drawing is done in the **draw** method:

~~~~
	var draw = function() {
		var count = 0;
		for (imageName in pictures) {
			context.drawImage(pictures[imageName], 0, rectSize, rectSize, 
				rectSize, rectSize * (count++ + 1), 135, rectSize, rectSize);
		}
	};
~~~~

As you recall, this method will be called at some predetermined interval, 
depending on how you set things up in the **getCanvas** method:

	setInterval(draw, 50);
	
The **draw** method is where you want to do most of your work. In 
particular, I would put the nested for loop in that method, and then I would 
add code for drawing the active character that glides over the surface of 
the grid. This means that the entire 12 X 12 grid, plus the main character, 
are being completely redrawn every 50 miliseconds, or however often the 
**draw** method is called. Ten or fifteen years ago, only a few machines had 
graphics cards powerful enough to do that efficiently. Now, however, we can 
safely plan to blit 145 images to the screen every few milleseconds without 
fear that the screen will start blinking or encounter other performance 
problems. Note also that the highly optimized HTML5 Canvas object helps make 
this feasible.

It is, of course, possible to optimize the code so that it does not recreate 
the entire grid each time **draw** is called. However, given the hardware 
available to us today, that should not be necessary. We can look into doing 
that, however, if it becomes necessary.
