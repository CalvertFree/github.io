<h2 id="week04-aws-and-node">Week04-AWS and Node</h2>
<h2 id="install-node">Install Node</h2>
<p>sudo apt-get update sudo apt-get upgrade sudo apt-get install git sudo apt-get install nodejs npm</p>
<p>Then mkdir git, and clone your repository.</p>
<h2 id="alternative-install-of-node">Alternative Install of Node</h2>
<p>Do this if you want to install the latest version of node and npm:</p>
<pre><code>    sudo apt-get install python-software-properties python g++ make
    sudo add-apt-repository ppa:chris-lea/node.js
    sudo apt-get update
    sudo apt-get install nodejs</code></pre>
<p>Reference from the Node GitHub site:</p>
<p><a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager</a></p>
<h2 id="the-assignment">The Assignment</h2>
<p>Create two keep screen shots. One is of your Putty Command Prompt showing the output from running the following command on your GridGame:</p>
<pre><code>node server.js</code></pre>
<p>In server.js you should show include at least one console.log statement that produces output at the command line shown in your first screen shot.</p>
<p>In your second screen shot, show your program running on your AWS server over port 30025. Your Elastic IP address and the port number should be clearly visible in the address bar.</p>
<h2 id="the-one-change-you-need-to-make">The One Change You Need to Make</h2>
<p>It turns out that you will need to make one change to your server.js file once you have downloaded it on AWS.</p>
<p>There is a call that looks like this in your code for logging on to OpenId:</p>
<pre><code>    var relyingParty = new openid.RelyingParty(
        &#39;http://localhost:30025/go&#39;, // Verification URL (yours)
        null, // Realm (optional, specifies realm for OpenID authentication)
        false, // Use stateless verification
        false, // Strict mode
        []
    );</code></pre>
<p>You need to change it to look like this:</p>
<pre><code>    var relyingParty = new openid.RelyingParty(
        &#39;http://192.168.2.23:30025/go&#39;, // Verification URL (yours)
        null, // Realm (optional, specifies realm for OpenID authentication)
        false, // Use stateless verification
        false, // Strict mode
        []
    );</code></pre>
<p>In this case, 192.168.2.23 is your Elastic IP. Or rather, it is standing in for your Elastic IP. You should not write those exact numbers and characters, but should instead substitude your own Elastic IP address which you can find on the AWS console. You can also make the call like this:</p>
<pre><code>    var relyingParty = new openid.RelyingParty(
        &#39;http://ec2-54-235-65-161.compute-1.amazonaws.com:30025/go&#39;, // Verification URL (yours)
        null, // Realm (optional, specifies realm for OpenID authentication)
        false, // Use stateless verification
        false, // Strict mode
        []
    );</code></pre>
<p>The new address that replaced localhost, the one that begins ec2-54, you can also get from the Elastic Ip page of the AWS Console. The lesson here is that you can use either the actual Elastic IP (eg 192.168.1.27), or the long form of the address shown in this second example. They both end up propogating out to the DNS machines and other nodes on the Internet, and allow users to find your AWS virtual machine.</p>
<h2 id="alternative">Alternative</h2>
<p>If you were in class last quarter, and know how to launch a node server and it in memory, then you can just submit the address of your node GameGrid running on AWS.</p>
<h2 id="fallback">Fallback</h2>
<p>You can't get full credit for this, but if you are stuck, take screen shots of DataInput01 from JsObjects instead of your game.</p>
